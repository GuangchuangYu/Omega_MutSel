# SJS. stephanie.spielman@gmail.com
# Generic code for simulating and deriving dN/dS via selection coeffcients and hyphy ML.
# Note that we only run equal frequenies and true kappa here.
# Bias is varied here, not in the sge submission script.

######## Input parameters ########
import sys
if (len(sys.argv) != 5):
    print "\n\nUsage: python run_siminf.py <rep> <treefile> <simdir> <cpu> \n."
    sys.exit()
rep = sys.argv[1]         # which rep we're on, for saving files
treefile = sys.argv[2]    # tree for simulation
simdir = sys.argv[3]      # directory of simulation library
cpu = sys.argv[4]         # hyphy can use
sys.path.append(simdir)
from functions_simandinf import *




seqlength = 500000
mu = 1e-6
kappa = rn.uniform(1.0, 6.0)
sd = rn.uniform(0., 4.)
mu_dict = {'AT': mu, 'TA':mu, 'CG': mu, 'GC':mu, 'AC': mu, 'CA':mu, 'GT':mu, 'TG':mu, 'AG': kappa*mu, 'GA':kappa*mu, 'CT':kappa*mu, 'TC':kappa*mu}
biases = [2., 3., 4., 5., 6.]

#The full output file
paramfile = "params"+str(rep)+".txt"
common_outstring = rep + '\t' + str(seqlength) + '\t' + str(mu) + '\t' + str(kappa) + '\t' + str(sd)
full_outstring = ''


# Determine a common set of amino acid selection coefficients to use across these runs.
aminos = ["A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y"]
shuffle(aminos)
aa_coeffs = dict(zip(aminos, draw_amino_coeffs(sd)))
        

for bias in biases:

    
    # Bias-specific output files
    seqfile       = "seqs" + str(rep) + "_bias" + str(int(bias)) + ".fasta"
    freqfile      = "codonFreqs" + str(rep) + "_bias" + str(int(bias)) + ".txt"
    amino_sscfile = "aminoCoeffs" + str(rep) + "_bias" + str(int(bias)) + ".txt"
    codon_sscfile = "codonCoeffs" + str(rep) + "_bias" + str(int(bias)) + ".txt"

    # Set up steady-state codon frequencies based on PREDETERMINED amino acid selection coefficients
    print "Deriving equilibrium codon frequencies"
    codon_freqs_true, codon_freqs_true_dict, gc_content, entropy = set_codon_freqs(aa_coeffs, freqfile, amino_sscfile, codon_sscfile, bias)


    # Simulate according to MutSel model along phylogeny
    print "Simulating"
    simulate(codon_freqs_true, seqfile, treefile, mu_dict, seqlength)
    
    
    # Derive omega from selection coefficients (well, frequencies, but same deal)
    print "Deriving omega from selection coefficients"
    derivedw = derive_omega(codon_freqs_true_dict, mu_dict, bias!=0.) # last argument as bool for function to know whether to compute dS.
    
    
    # ML, with true kappa and equal frequencies
    print "Conducting ML inference with HyPhy"
    mlw = run_hyphy_convergence(seqfile, treefile, cpu, kappa)
    werr = (derivedw - mlw) / derivedw
    
    # Build up output string
    full_outstring += common_outstring + '\t' + str(bias) + '\t' + str(gc_content) + '\t' + str(entropy) + '\t' + str(derivedw) + '\t' + str(mlw) + '\t' + str(werr) + '\n'

# Finally, save results
outf = open(paramfile, 'w')
outf.write( full_outstring )
outf.close()   







